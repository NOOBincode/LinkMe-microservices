// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/GoSimplicity/LinkMe-microservices/api/check/v1"
	"github.com/GoSimplicity/LinkMe-microservices/api/user/v1"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/events/publish"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/internal/biz"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/internal/conf"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/internal/data"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/internal/server"
	"github.com/GoSimplicity/LinkMe-microservices/app/linkme-post/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confService *conf.Service, userClient v1.UserClient, checkClient check.CheckClient, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	db, err := data.NewDB(confData)
	if err != nil {
		return nil, nil, err
	}
	cmdable := data.NewRedis(confData)
	client := data.NewMongoDB(confData)
	dataData, cleanup, err := data.NewData(confData, confService, db, cmdable, logger, client)
	if err != nil {
		return nil, nil, err
	}
	zapLogger := data.NewLogger()
	postData := data.NewPostData(dataData, zapLogger)
	saramaClient, err := data.NewSaramaClient(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	syncProducer := data.NewSyncProducer(saramaClient)
	producer := publish.NewSaramaSyncProducer(syncProducer, zapLogger)
	postBiz := biz.NewPostBiz(postData, zapLogger, producer)
	postService := service.NewPostService(postBiz, userClient)
	grpcServer := server.NewGRPCServer(confServer, postService, logger, tracerProvider)
	httpServer := server.NewHTTPServer(confServer, postService, logger, tracerProvider)
	publishPostEventConsumer := publish.NewPublishPostEventConsumer(checkClient, saramaClient, zapLogger)
	app := newApp(confService, logger, grpcServer, httpServer, publishPostEventConsumer)
	return app, func() {
		cleanup()
	}, nil
}
