// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: api/ranking/v1/ranking.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRankingListTopN = "/api.ranking.v1.Ranking/ListTopN"

type RankingHTTPServer interface {
	// ListTopN 获取分页的前 N 个排名列表
	ListTopN(context.Context, *ListTopNRequest) (*ListTopNReply, error)
}

func RegisterRankingHTTPServer(s *http.Server, srv RankingHTTPServer) {
	r := s.Route("/")
	r.POST("/list", _Ranking_ListTopN0_HTTP_Handler(srv))
}

func _Ranking_ListTopN0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTopNRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingListTopN)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTopN(ctx, req.(*ListTopNRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTopNReply)
		return ctx.Result(200, reply)
	}
}

type RankingHTTPClient interface {
	ListTopN(ctx context.Context, req *ListTopNRequest, opts ...http.CallOption) (rsp *ListTopNReply, err error)
}

type RankingHTTPClientImpl struct {
	cc *http.Client
}

func NewRankingHTTPClient(client *http.Client) RankingHTTPClient {
	return &RankingHTTPClientImpl{client}
}

func (c *RankingHTTPClientImpl) ListTopN(ctx context.Context, in *ListTopNRequest, opts ...http.CallOption) (*ListTopNReply, error) {
	var out ListTopNReply
	pattern := "/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRankingListTopN))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
