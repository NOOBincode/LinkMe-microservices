// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/post/v1/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Post_CreatePost_FullMethodName       = "/api.post.Post/CreatePost"
	Post_UpdatePost_FullMethodName       = "/api.post.Post/UpdatePost"
	Post_UpdatePostStatus_FullMethodName = "/api.post.Post/UpdatePostStatus"
	Post_DeletePost_FullMethodName       = "/api.post.Post/DeletePost"
	Post_PublishPost_FullMethodName      = "/api.post.Post/PublishPost"
	Post_ListPost_FullMethodName         = "/api.post.Post/ListPost"
	Post_ListPubPost_FullMethodName      = "/api.post.Post/ListPubPost"
	Post_DetailPost_FullMethodName       = "/api.post.Post/DetailPost"
	Post_DetailPubPost_FullMethodName    = "/api.post.Post/DetailPubPost"
)

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostReply, error)
	UpdatePostStatus(ctx context.Context, in *UpdatePostStatusRequest, opts ...grpc.CallOption) (*UpdatePostStatusReply, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error)
	PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*PublishPostReply, error)
	ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostReply, error)
	ListPubPost(ctx context.Context, in *ListPubPostRequest, opts ...grpc.CallOption) (*ListPubPostReply, error)
	DetailPost(ctx context.Context, in *DetailPostRequest, opts ...grpc.CallOption) (*DetailPostReply, error)
	DetailPubPost(ctx context.Context, in *DetailPubPostRequest, opts ...grpc.CallOption) (*DetailPubPostReply, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostReply)
	err := c.cc.Invoke(ctx, Post_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePostReply)
	err := c.cc.Invoke(ctx, Post_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) UpdatePostStatus(ctx context.Context, in *UpdatePostStatusRequest, opts ...grpc.CallOption) (*UpdatePostStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePostStatusReply)
	err := c.cc.Invoke(ctx, Post_UpdatePostStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, Post_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) PublishPost(ctx context.Context, in *PublishPostRequest, opts ...grpc.CallOption) (*PublishPostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishPostReply)
	err := c.cc.Invoke(ctx, Post_PublishPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) ListPost(ctx context.Context, in *ListPostRequest, opts ...grpc.CallOption) (*ListPostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostReply)
	err := c.cc.Invoke(ctx, Post_ListPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) ListPubPost(ctx context.Context, in *ListPubPostRequest, opts ...grpc.CallOption) (*ListPubPostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPubPostReply)
	err := c.cc.Invoke(ctx, Post_ListPubPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DetailPost(ctx context.Context, in *DetailPostRequest, opts ...grpc.CallOption) (*DetailPostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailPostReply)
	err := c.cc.Invoke(ctx, Post_DetailPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) DetailPubPost(ctx context.Context, in *DetailPubPostRequest, opts ...grpc.CallOption) (*DetailPubPostReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailPubPostReply)
	err := c.cc.Invoke(ctx, Post_DetailPubPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error)
	UpdatePostStatus(context.Context, *UpdatePostStatusRequest) (*UpdatePostStatusReply, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error)
	PublishPost(context.Context, *PublishPostRequest) (*PublishPostReply, error)
	ListPost(context.Context, *ListPostRequest) (*ListPostReply, error)
	ListPubPost(context.Context, *ListPubPostRequest) (*ListPubPostReply, error)
	DetailPost(context.Context, *DetailPostRequest) (*DetailPostReply, error)
	DetailPubPost(context.Context, *DetailPubPostRequest) (*DetailPubPostReply, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServer) UpdatePostStatus(context.Context, *UpdatePostStatusRequest) (*UpdatePostStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostStatus not implemented")
}
func (UnimplementedPostServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServer) PublishPost(context.Context, *PublishPostRequest) (*PublishPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPost not implemented")
}
func (UnimplementedPostServer) ListPost(context.Context, *ListPostRequest) (*ListPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedPostServer) ListPubPost(context.Context, *ListPubPostRequest) (*ListPubPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPubPost not implemented")
}
func (UnimplementedPostServer) DetailPost(context.Context, *DetailPostRequest) (*DetailPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPost not implemented")
}
func (UnimplementedPostServer) DetailPubPost(context.Context, *DetailPubPostRequest) (*DetailPubPostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPubPost not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_UpdatePostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UpdatePostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UpdatePostStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UpdatePostStatus(ctx, req.(*UpdatePostStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_PublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).PublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_PublishPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).PublishPost(ctx, req.(*PublishPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_ListPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).ListPost(ctx, req.(*ListPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_ListPubPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPubPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).ListPubPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_ListPubPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).ListPubPost(ctx, req.(*ListPubPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DetailPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DetailPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DetailPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DetailPost(ctx, req.(*DetailPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_DetailPubPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPubPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).DetailPubPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_DetailPubPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).DetailPubPost(ctx, req.(*DetailPubPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.post.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _Post_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Post_UpdatePost_Handler,
		},
		{
			MethodName: "UpdatePostStatus",
			Handler:    _Post_UpdatePostStatus_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Post_DeletePost_Handler,
		},
		{
			MethodName: "PublishPost",
			Handler:    _Post_PublishPost_Handler,
		},
		{
			MethodName: "ListPost",
			Handler:    _Post_ListPost_Handler,
		},
		{
			MethodName: "ListPubPost",
			Handler:    _Post_ListPubPost_Handler,
		},
		{
			MethodName: "DetailPost",
			Handler:    _Post_DetailPost_Handler,
		},
		{
			MethodName: "DetailPubPost",
			Handler:    _Post_DetailPubPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/post/v1/post.proto",
}
